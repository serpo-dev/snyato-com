{"ast":null,"code":"import chats from './redux/data/inboxItems.json';\nconst ONE_BY_ONE_CHARACHTERS_ENTERING = 'ONE-BY-ONE-CHARACHTERS-ENTERING';\nconst ADD_NEW_MESSAGE = 'ADD-NEW-MESSAGE';\nexport let oneByOneCharachtersEnteringActionCreator = desiredValue => ({\n  type: ONE_BY_ONE_CHARACHTERS_ENTERING,\n  desiredValue: desiredValue\n});\nexport let addNewMessageActionCreator = desiredValue => ({\n  type: ADD_NEW_MESSAGE,\n  desiredValue: desiredValue\n});\nexport let store = {\n  _state: {\n    Inbox: {\n      InboxItems: chats,\n      InboxMessages: [{\n        id: \"1\",\n        text: \"- It's not easy to live your own way.\"\n      }, {\n        id: \"2\",\n        text: \"Because you can't blame anybody but yourself.\"\n      }, {\n        id: \"3\",\n        text: \"- I don't want to be a burden! I want to be useful.\"\n      }]\n    },\n    Profile: {\n      posts: [{\n        id: '1'\n      }]\n    }\n  },\n  currentValueOfTextArea: '',\n\n  _reloadApp() {},\n\n  subscriber(observer) {\n    this._reloadApp = observer;\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  getDefaultText() {\n    return this.currentValueOfTextArea;\n  },\n\n  dispatch(action) {\n    if (action.type === 'ONE-BY-ONE-CHARACHTERS-ENTERING') {\n      this.currentValueOfTextArea = action.desiredValue;\n\n      this._reloadApp(this._state);\n    } else if (action.type === 'ADD-NEW-MESSAGE') {\n      let count = this._state.Inbox.InboxMessages.length;\n      this._state.Inbox.InboxMessages[count] = {\n        id: `${count + 1}`,\n        text: `${action.desiredValue}`\n      };\n      this.currentValueOfTextArea = '';\n\n      this._reloadApp(this._state);\n    }\n  }\n\n};","map":{"version":3,"names":["chats","ONE_BY_ONE_CHARACHTERS_ENTERING","ADD_NEW_MESSAGE","oneByOneCharachtersEnteringActionCreator","desiredValue","type","addNewMessageActionCreator","store","_state","Inbox","InboxItems","InboxMessages","id","text","Profile","posts","currentValueOfTextArea","_reloadApp","subscriber","observer","getState","getDefaultText","dispatch","action","count","length"],"sources":["/home/sergey/Documents/live-catcher/src/state.js"],"sourcesContent":["import chats from './redux/data/inboxItems.json';\n\nconst ONE_BY_ONE_CHARACHTERS_ENTERING = 'ONE-BY-ONE-CHARACHTERS-ENTERING';\nconst ADD_NEW_MESSAGE = 'ADD-NEW-MESSAGE'\n\n\nexport let oneByOneCharachtersEnteringActionCreator = (desiredValue) => ({ type: ONE_BY_ONE_CHARACHTERS_ENTERING, desiredValue: desiredValue })\nexport let addNewMessageActionCreator = (desiredValue) => ({ type: ADD_NEW_MESSAGE, desiredValue: desiredValue })\n\n\nexport let store = {\n    _state: {\n        Inbox: {\n            InboxItems: chats,\n            InboxMessages: [\n                {\n                    id: \"1\",\n                    text: \"- It's not easy to live your own way.\"\n                },\n                {\n                    id: \"2\",\n                    text: \"Because you can't blame anybody but yourself.\"\n                },\n                {\n                    id: \"3\",\n                    text: \"- I don't want to be a burden! I want to be useful.\"\n                }\n            ]\n        },\n        Profile: {\n            posts: [\n                {\n                    id: '1'\n                }\n            ]\n        }\n    },\n    currentValueOfTextArea: '',\n    _reloadApp() { },\n    subscriber(observer) {\n        this._reloadApp = observer;\n    },\n    getState() {\n        return this._state;\n    },\n    getDefaultText() {\n        return this.currentValueOfTextArea;\n    },\n    dispatch(action) {\n        if (action.type === 'ONE-BY-ONE-CHARACHTERS-ENTERING') {\n            this.currentValueOfTextArea = action.desiredValue;\n            this._reloadApp(this._state);\n        } else if (action.type === 'ADD-NEW-MESSAGE') {\n            let count = this._state.Inbox.InboxMessages.length;\n            this._state.Inbox.InboxMessages[count] =\n            {\n                id: `${count + 1}`,\n                text: `${action.desiredValue}`\n            };\n            this.currentValueOfTextArea = '';\n            this._reloadApp(this._state);\n        }\n    }\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,8BAAlB;AAEA,MAAMC,+BAA+B,GAAG,iCAAxC;AACA,MAAMC,eAAe,GAAG,iBAAxB;AAGA,OAAO,IAAIC,wCAAwC,GAAIC,YAAD,KAAmB;EAAEC,IAAI,EAAEJ,+BAAR;EAAyCG,YAAY,EAAEA;AAAvD,CAAnB,CAA/C;AACP,OAAO,IAAIE,0BAA0B,GAAIF,YAAD,KAAmB;EAAEC,IAAI,EAAEH,eAAR;EAAyBE,YAAY,EAAEA;AAAvC,CAAnB,CAAjC;AAGP,OAAO,IAAIG,KAAK,GAAG;EACfC,MAAM,EAAE;IACJC,KAAK,EAAE;MACHC,UAAU,EAAEV,KADT;MAEHW,aAAa,EAAE,CACX;QACIC,EAAE,EAAE,GADR;QAEIC,IAAI,EAAE;MAFV,CADW,EAKX;QACID,EAAE,EAAE,GADR;QAEIC,IAAI,EAAE;MAFV,CALW,EASX;QACID,EAAE,EAAE,GADR;QAEIC,IAAI,EAAE;MAFV,CATW;IAFZ,CADH;IAkBJC,OAAO,EAAE;MACLC,KAAK,EAAE,CACH;QACIH,EAAE,EAAE;MADR,CADG;IADF;EAlBL,CADO;EA2BfI,sBAAsB,EAAE,EA3BT;;EA4BfC,UAAU,GAAG,CAAG,CA5BD;;EA6BfC,UAAU,CAACC,QAAD,EAAW;IACjB,KAAKF,UAAL,GAAkBE,QAAlB;EACH,CA/Bc;;EAgCfC,QAAQ,GAAG;IACP,OAAO,KAAKZ,MAAZ;EACH,CAlCc;;EAmCfa,cAAc,GAAG;IACb,OAAO,KAAKL,sBAAZ;EACH,CArCc;;EAsCfM,QAAQ,CAACC,MAAD,EAAS;IACb,IAAIA,MAAM,CAAClB,IAAP,KAAgB,iCAApB,EAAuD;MACnD,KAAKW,sBAAL,GAA8BO,MAAM,CAACnB,YAArC;;MACA,KAAKa,UAAL,CAAgB,KAAKT,MAArB;IACH,CAHD,MAGO,IAAIe,MAAM,CAAClB,IAAP,KAAgB,iBAApB,EAAuC;MAC1C,IAAImB,KAAK,GAAG,KAAKhB,MAAL,CAAYC,KAAZ,CAAkBE,aAAlB,CAAgCc,MAA5C;MACA,KAAKjB,MAAL,CAAYC,KAAZ,CAAkBE,aAAlB,CAAgCa,KAAhC,IACA;QACIZ,EAAE,EAAG,GAAEY,KAAK,GAAG,CAAE,EADrB;QAEIX,IAAI,EAAG,GAAEU,MAAM,CAACnB,YAAa;MAFjC,CADA;MAKA,KAAKY,sBAAL,GAA8B,EAA9B;;MACA,KAAKC,UAAL,CAAgB,KAAKT,MAArB;IACH;EACJ;;AApDc,CAAZ"},"metadata":{},"sourceType":"module"}